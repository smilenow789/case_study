package requirementsengineer;

import java.io.Serializable;
import java.util.Objects; // Import für Objects.hash

import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject; // Import für @Inject
import jakarta.inject.Named;

@Named
@RequestScoped
public class Testfall implements Serializable {
	private int id = 0;
	private String testfallTitel;
	private String beschreibung;
	private String ergebnis = "noch nicht ausgeführt";
	private int anforderungsId = 0;

	private static int nextId = 3000;

	@Inject // Inject the ApplicationScoped Testfallliste
	private Testfallliste testfallliste;

	public Testfall() {
		this.id = nextId;
		nextId = id + 1;
		// Debug-Ausgabe: Standardkonstruktor wird aufgerufen
		System.out.println("Testfall() Standardkonstruktor aufgerufen. ID: " + this.id + " (nextId: " + Testfall.nextId + ")");
	}

	public Testfall(String testfallTitel, String beschreibung, int id) {
		this.id = id;
		this.testfallTitel = testfallTitel;
		this.beschreibung = beschreibung;
		// Debug-Ausgabe: Parameterisierter Konstruktor wird aufgerufen
		System.out.println("Testfall(String, String, int) Konstruktor aufgerufen. ID: " + this.id + ", Titel: " + this.testfallTitel);

		if (id >= nextId) {
			nextId = id + 1;
		}
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getTestfallTitel() {
		return testfallTitel;
	}

	public void setTestfallTitel(String testfallTitel) {
		System.out.println("Testfall-ID: " + this.id + " setTestfallTitel() aufgerufen. Altes Titel: '" + this.testfallTitel + "', Neues Titel: '" + testfallTitel + "'");
		this.testfallTitel = testfallTitel;
	}

	public String getBeschreibung() {
		return beschreibung;
	}

	public void setBeschreibung(String beschreibung) {
		this.beschreibung = beschreibung;
	}

	public String getErgebnis() {
		return ergebnis;
	}

	public void setErgebnis(String ergebnis) {
		// Debug-Ausgabe: Setter für Ergebnis wird aufgerufen
		System.out.println("Testfall-ID: " + this.id + " setErgebnis() aufgerufen. Altes Ergebnis: '" + this.ergebnis + "', Neues Ergebnis: '" + ergebnis + "'");
		this.ergebnis = ergebnis;
	}

	public int getAnforderungsId() {
		return anforderungsId;
	}

	public void setAnforderungsId(int anforderungsId) {
		this.anforderungsId = anforderungsId;
	}

	public void testfallErstellen() {
		// Validation check
		if (this.testfallTitel == null || this.testfallTitel.trim().isEmpty() ||
			this.beschreibung == null || this.beschreibung.trim().isEmpty()) {

			FacesContext.getCurrentInstance().addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_ERROR, "Fehler!", "Bitte füllen Sie alle erforderlichen Felder aus (Titel, Beschreibung)."));
			return; // Stop execution if validation fails
		}

		// The 'id' in this.id would typically be the autogenerated one from the default constructor,
		// or one potentially set by a form if you allow manual ID input.
		// If the current 'Testfall' instance IS the one being created/edited,
		// you might just add 'this' to the list directly after setting its properties.
		// However, if this Testfall instance is a backing bean for a form, and you want to
		// create a *new* persistent object from its properties, then the current approach
		// of creating a 'neuerTestfall' is correct.
		// Let's assume the latter for now, where 'this' acts as a temporary form bean.

		// Ensure the ID is unique for the new testfall being added to the list
		// (The Testfall constructor already handles nextId incrementation)
		Testfall neuerTestfall = new Testfall(this.testfallTitel, this.beschreibung, this.id);
		neuerTestfall.setAnforderungsId(this.anforderungsId); // Set the requirement ID for the new testfall
		neuerTestfall.setErgebnis(this.ergebnis); // Also set the result, though it defaults

		testfallliste.getListe().add(neuerTestfall);

		System.out.println("Testfall erfolgreich erstellt (vom Formular):");
		System.out.println("  ID: " + neuerTestfall.getId());
		System.out.println("  Zugeordnete Anforderungs-ID: " + neuerTestfall.getAnforderungsId());
		System.out.println("  Testfall-Titel: " + neuerTestfall.getTestfallTitel());
		System.out.println("  Beschreibung: " + neuerTestfall.getBeschreibung());
		System.out.println("  Ergebnis: " + neuerTestfall.getErgebnis());

		// Felder leeren nach erstellung
		this.id = nextId; // Reset ID for the next creation (or assign 0 if always new)
		this.testfallTitel = null;
		this.beschreibung = null;
		this.anforderungsId = 0;
		this.ergebnis = "noch nicht ausgeführt"; // Reset to default

		info(); // Display success message
	}

	public static void info() {
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_INFO, "Erfolg!", "Testfall erfolgreich erfasst."));
	}

    // Implementierung von equals und hashCode basierend auf der ID
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Testfall testfall = (Testfall) o;
        return id == testfall.id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}
